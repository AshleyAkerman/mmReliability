type = "paired")$n)
}
# Make a new df with the results and the corresponding conditions of the calculations
power_curve_df_1 <- bind_cols(
conditions_1,
samples_within = samples_curve_within_1)
# Filter to samples < 200 people for ease of display
power_curve_df_1 <- power_curve_df_1 %>% filter(samples_within < 200)
# Change the values of the 'change' column
# For every row of the dataframe...
for (i in 1: nrow(power_curve_df_1)){
# And every value in the Change scores (grand_mean * (SESOI / 100))
for (j in 1: length(effects_1)){
# Change the value in absolute units back to what it was in SESOI units
if(power_curve_df_1[i, 2] == effects_1[j]){
power_curve_df_1[i, 2] <- SESOI[j]
}
}
}
# Plot for first measurement tool
plot_within_1 <- ggplot(power_curve_df_1,
aes(x = cov, y = samples_within)) +
geom_line(aes(color = factor(effects)), size = 0.5) +
geom_vline(xintercept = 38.0, linetype = 2, colour = 'red') +
geom_vline(xintercept = 28.0, linetype = 2, colour = 'blue') +
scale_x_continuous("Coefficient of Variation", breaks = CoV, expand = c(0, 0)) +
scale_y_continuous("Sample Size", breaks = seq(0, 200, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggtitle("Measurement error: Frequency Analysis") +
theme_bw(base_size = 15)
MDC_as_Change2 <- round(((MDC_input2/grand_mean2) * 100), 0)
SESOI2 <- sort(c(SESOI, MDC_as_Change2))
effects_3 <- grand_mean2 * (SESOI2 / 100)
effects_4 <- round(effects_3 / pooledSD, 2)
# Generate new empty list
output_list <- c()
# Most studies would never have more than 50 participants, so stop there but generate values from 6 to 50, in increments of 1
# This will be consistent for each of the iterations below
n_samples <- seq(6, 200, 1)
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions <- expand.grid(n = n_samples, effect_sizes = effects_4)
# Then run a power calculation using a t-test on each of those rows
# i.e., taking the sample size, and the effect size and then extracting the provided power
power_curve_within <- sapply(seq_len(nrow(conditions)), function(i)
pwr::pwr.t.test(n = conditions[[i , 1]],
d = conditions[[i, 2]],
sig.level = 0.05,
type = "paired")$power)
# Bind the columns together so that the data frame above (i.e., 'conditions' has the achieved power next to it))
power_curve_df <- dplyr::bind_cols(
conditions,
power_within = power_curve_within)
# Plot the data with a vertical line at 0.8 power
plot_within_2 <- ggplot2::ggplot(power_curve_df, ggplot2::aes(x = power_within, y = n)) +
ggplot2::geom_line(ggplot2::aes(color = factor(effect_sizes)), size = 0.5) +
ggplot2::geom_vline(xintercept = 0.8, linetype = 2, colour = 'gray30') +
ggplot2::scale_x_continuous("Power", breaks = seq(0, 1, .1)) +
ggplot2::scale_y_continuous("Sample Size", breaks = seq(6, 200, 2)) +
ggplot2::scale_color_viridis_d("Effect Size") +
ggplot2::ggtitle("Power curve for paired samples") +
#ggplot2::theme(plot.title = element_text(size = 12, face = "bold")) +
ggplot2::theme_bw(base_size = 12)
joint_plot <- arrangeGrob(plot_within_1, plot_within_2, nrow = 2)
return(joint_plot)
}
MDC_input1 <- c(6.7, 8.2, 10.6, 12.6, 16.6)
grand_mean1 <- 27.8
MDC_input2 <- c(6.0, 7.4, 9.5, 11.3, 14.9)
grand_mean2 <- 27.6
pooledSD <- 17.5
fig1 <- batt_atkin_fun(MDC_input1 = MDC_input1,
MDC_input2 = MDC_input2,
grand_mean1 = grand_mean1,
grand_mean2 = grand_mean2,
pooledSD = pooledSD,
CoV = seq(4, 40, 2))
plot(fig1)
batt_atkin_fun <- function(MDC_input1,
grand_mean1,
MDC_input2,
grand_mean2,
pooledSD,
SESOI = c(1, 3, 5, 10, 20, 25, 30),
CoV = seq(4, 50, 2)) {
# Check it is a vector
MDC_input_1 <- as.vector(MDC_input1)
MDC_input_2 <- as.vector(MDC_input2)
#
effects_1 <- grand_mean1 * (SESOI / 100)
#
# sd_diff_1 <- sqrt(2) * (((MDC_as_CoV_1 / 100)) * grand_mean_1)
# sd_diff_2 <- sqrt(2) * (((MDC_as_CoV_2 / 100)) * grand_mean_2)
#
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions_1 <- expand.grid(cov = CoV, effects = effects_1)
conditions_1$sd_diff <- sqrt(2) * (((conditions_1$cov / 100)) * grand_mean1)
# First measurement tool
samples_curve_within_1 <- c()
# Loop over the rows and run a power calculation
for (i in 1: nrow(conditions_1)){
# Store the results of the sample size in the vector saved above
samples_curve_within_1 <- c(samples_curve_within_1,
pwr::pwr.t.test(d = conditions_1[[i, 2]] / conditions_1[[i, 3]],
sig.level = 0.05,
power = 0.80,
type = "paired")$n)
}
# Make a new df with the results and the corresponding conditions of the calculations
power_curve_df_1 <- bind_cols(
conditions_1,
samples_within = samples_curve_within_1)
# Filter to samples < 200 people for ease of display
power_curve_df_1 <- power_curve_df_1 %>% filter(samples_within < 200)
# Change the values of the 'change' column
# For every row of the dataframe...
for (i in 1: nrow(power_curve_df_1)){
# And every value in the Change scores (grand_mean * (SESOI / 100))
for (j in 1: length(effects_1)){
# Change the value in absolute units back to what it was in SESOI units
if(power_curve_df_1[i, 2] == effects_1[j]){
power_curve_df_1[i, 2] <- SESOI[j]
}
}
}
# Plot for first measurement tool
plot_within_1 <- ggplot(power_curve_df_1,
aes(x = cov, y = samples_within)) +
geom_line(aes(color = factor(effects)), size = 0.5) +
geom_vline(xintercept = 38.0, linetype = 2, colour = 'red') +
geom_vline(xintercept = 28.0, linetype = 2, colour = 'blue') +
scale_x_continuous("Coefficient of Variation", breaks = CoV, expand = c(0, 0)) +
scale_y_continuous("Sample Size", breaks = seq(0, 200, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggtitle("Measurement error: Frequency Analysis") +
theme_bw(base_size = 15)
MDC_as_Change2 <- round(((MDC_input2/grand_mean2) * 100), 0)
SESOI2 <- sort(c(SESOI, MDC_as_Change2))
effects_3 <- grand_mean2 * (SESOI2 / 100)
effects_4 <- round(effects_3 / pooledSD, 2)
# Generate new empty list
output_list <- c()
# Most studies would never have more than 50 participants, so stop there but generate values from 6 to 50, in increments of 1
# This will be consistent for each of the iterations below
n_samples <- seq(6, 200, 1)
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions <- expand.grid(n = n_samples, effect_sizes = effects_4)
# Then run a power calculation using a t-test on each of those rows
# i.e., taking the sample size, and the effect size and then extracting the provided power
power_curve_within <- sapply(seq_len(nrow(conditions)), function(i)
pwr::pwr.t.test(n = conditions[[i , 1]],
d = conditions[[i, 2]],
sig.level = 0.05,
type = "paired")$power)
# Bind the columns together so that the data frame above (i.e., 'conditions' has the achieved power next to it))
power_curve_df <- dplyr::bind_cols(
conditions,
power_within = power_curve_within)
# Plot the data with a vertical line at 0.8 power
plot_within_2 <- ggplot2::ggplot(power_curve_df, ggplot2::aes(x = power_within, y = n)) +
ggplot2::geom_line(ggplot2::aes(color = factor(effect_sizes)), size = 0.5) +
ggplot2::geom_vline(xintercept = 0.8, linetype = 2, colour = 'gray30') +
ggplot2::scale_x_continuous("Power", breaks = seq(0, 1, .1)) +
ggplot2::scale_y_continuous("Sample Size", breaks = seq(6, 206, 10)) +
ggplot2::scale_color_viridis_d("Effect Size") +
ggplot2::ggtitle("Power curve for paired samples") +
#ggplot2::theme(plot.title = element_text(size = 12, face = "bold")) +
ggplot2::theme_bw(base_size = 12)
joint_plot <- arrangeGrob(plot_within_1, plot_within_2, nrow = 2)
return(joint_plot)
}
MDC_input1 <- c(6.7, 8.2, 10.6, 12.6, 16.6)
grand_mean1 <- 27.8
MDC_input2 <- c(6.0, 7.4, 9.5, 11.3, 14.9)
grand_mean2 <- 27.6
pooledSD <- 17.5
fig1 <- batt_atkin_fun(MDC_input1 = MDC_input1,
MDC_input2 = MDC_input2,
grand_mean1 = grand_mean1,
grand_mean2 = grand_mean2,
pooledSD = pooledSD,
CoV = seq(4, 40, 2))
plot(fig1)
batt_atkin_fun <- function(MDC_input1,
grand_mean1,
MDC_input2,
grand_mean2,
pooledSD,
SESOI = c(1, 3, 5, 10, 20, 25, 30),
CoV = seq(4, 50, 2)) {
# Check it is a vector
MDC_input_1 <- as.vector(MDC_input1)
MDC_input_2 <- as.vector(MDC_input2)
#
effects_1 <- grand_mean1 * (SESOI / 100)
#
# sd_diff_1 <- sqrt(2) * (((MDC_as_CoV_1 / 100)) * grand_mean_1)
# sd_diff_2 <- sqrt(2) * (((MDC_as_CoV_2 / 100)) * grand_mean_2)
#
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions_1 <- expand.grid(cov = CoV, effects = effects_1)
conditions_1$sd_diff <- sqrt(2) * (((conditions_1$cov / 100)) * grand_mean1)
# First measurement tool
samples_curve_within_1 <- c()
# Loop over the rows and run a power calculation
for (i in 1: nrow(conditions_1)){
# Store the results of the sample size in the vector saved above
samples_curve_within_1 <- c(samples_curve_within_1,
pwr::pwr.t.test(d = conditions_1[[i, 2]] / conditions_1[[i, 3]],
sig.level = 0.05,
power = 0.80,
type = "paired")$n)
}
# Make a new df with the results and the corresponding conditions of the calculations
power_curve_df_1 <- bind_cols(
conditions_1,
samples_within = samples_curve_within_1)
# Filter to samples < 200 people for ease of display
power_curve_df_1 <- power_curve_df_1 %>% filter(samples_within < 200)
# Change the values of the 'change' column
# For every row of the dataframe...
for (i in 1: nrow(power_curve_df_1)){
# And every value in the Change scores (grand_mean * (SESOI / 100))
for (j in 1: length(effects_1)){
# Change the value in absolute units back to what it was in SESOI units
if(power_curve_df_1[i, 2] == effects_1[j]){
power_curve_df_1[i, 2] <- SESOI[j]
}
}
}
# Plot for first measurement tool
plot_within_1 <- ggplot(power_curve_df_1,
aes(x = cov, y = samples_within)) +
geom_line(aes(color = factor(effects)), size = 0.5) +
geom_vline(xintercept = 38.0, linetype = 2, colour = 'red') +
geom_vline(xintercept = 28.0, linetype = 2, colour = 'blue') +
scale_x_continuous("Coefficient of Variation", breaks = CoV, expand = c(0, 0)) +
scale_y_continuous("Sample Size", breaks = seq(0, 200, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggtitle("Measurement error: Frequency Analysis") +
theme_bw(base_size = 15)
MDC_as_Change2 <- round(((MDC_input2/grand_mean2) * 100), 0)
SESOI2 <- sort(c(SESOI, MDC_as_Change2))
effects_3 <- grand_mean2 * (SESOI2 / 100)
effects_4 <- round(effects_3 / pooledSD, 2)
# Generate new empty list
output_list <- c()
# Most studies would never have more than 50 participants, so stop there but generate values from 6 to 50, in increments of 1
# This will be consistent for each of the iterations below
n_samples <- seq(6, 200, 1)
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions <- expand.grid(n = n_samples, effect_sizes = effects_4)
# Then run a power calculation using a t-test on each of those rows
# i.e., taking the sample size, and the effect size and then extracting the provided power
power_curve_within <- sapply(seq_len(nrow(conditions)), function(i)
pwr::pwr.t.test(n = conditions[[i , 1]],
d = conditions[[i, 2]],
sig.level = 0.05,
type = "paired")$power)
# Bind the columns together so that the data frame above (i.e., 'conditions' has the achieved power next to it))
power_curve_df <- dplyr::bind_cols(
conditions,
power_within = power_curve_within)
# Plot the data with a vertical line at 0.8 power
plot_within_2 <- ggplot2::ggplot(power_curve_df, ggplot2::aes(x = power_within, y = n)) +
ggplot2::geom_line(ggplot2::aes(color = factor(effect_sizes)), size = 0.5) +
ggplot2::geom_vline(xintercept = 0.8, linetype = 2, colour = 'gray30') +
ggplot2::scale_x_continuous("Power", breaks = seq(0, 1, .1), expand = c(0, 0)) +
ggplot2::scale_y_continuous("Sample Size", breaks = seq(6, 206, 10), expand = c(0, 0)) +
ggplot2::scale_color_viridis_d("Effect Size") +
ggplot2::ggtitle("Power curve for paired samples") +
#ggplot2::theme(plot.title = element_text(size = 12, face = "bold")) +
ggplot2::theme_bw(base_size = 12)
joint_plot <- arrangeGrob(plot_within_1, plot_within_2, nrow = 2)
return(joint_plot)
}
MDC_input1 <- c(6.7, 8.2, 10.6, 12.6, 16.6)
grand_mean1 <- 27.8
MDC_input2 <- c(6.0, 7.4, 9.5, 11.3, 14.9)
grand_mean2 <- 27.6
pooledSD <- 17.5
fig1 <- batt_atkin_fun(MDC_input1 = MDC_input1,
MDC_input2 = MDC_input2,
grand_mean1 = grand_mean1,
grand_mean2 = grand_mean2,
pooledSD = pooledSD,
CoV = seq(4, 40, 2))
plot(fig1)
batt_atkin_fun <- function(MDC_input1,
grand_mean1,
MDC_input2,
grand_mean2,
pooledSD,
SESOI = c(1, 3, 5, 10, 20, 25, 30),
CoV = seq(4, 50, 2)) {
# Check it is a vector
MDC_input_1 <- as.vector(MDC_input1)
MDC_input_2 <- as.vector(MDC_input2)
#
effects_1 <- grand_mean1 * (SESOI / 100)
#
# sd_diff_1 <- sqrt(2) * (((MDC_as_CoV_1 / 100)) * grand_mean_1)
# sd_diff_2 <- sqrt(2) * (((MDC_as_CoV_2 / 100)) * grand_mean_2)
#
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions_1 <- expand.grid(cov = CoV, effects = effects_1)
conditions_1$sd_diff <- sqrt(2) * (((conditions_1$cov / 100)) * grand_mean1)
# First measurement tool
samples_curve_within_1 <- c()
# Loop over the rows and run a power calculation
for (i in 1: nrow(conditions_1)){
# Store the results of the sample size in the vector saved above
samples_curve_within_1 <- c(samples_curve_within_1,
pwr::pwr.t.test(d = conditions_1[[i, 2]] / conditions_1[[i, 3]],
sig.level = 0.05,
power = 0.80,
type = "paired")$n)
}
# Make a new df with the results and the corresponding conditions of the calculations
power_curve_df_1 <- bind_cols(
conditions_1,
samples_within = samples_curve_within_1)
# Filter to samples < 200 people for ease of display
power_curve_df_1 <- power_curve_df_1 %>% filter(samples_within < 200)
# Change the values of the 'change' column
# For every row of the dataframe...
for (i in 1: nrow(power_curve_df_1)){
# And every value in the Change scores (grand_mean * (SESOI / 100))
for (j in 1: length(effects_1)){
# Change the value in absolute units back to what it was in SESOI units
if(power_curve_df_1[i, 2] == effects_1[j]){
power_curve_df_1[i, 2] <- SESOI[j]
}
}
}
# Plot for first measurement tool
plot_within_1 <- ggplot(power_curve_df_1,
aes(x = cov, y = samples_within)) +
geom_line(aes(color = factor(effects)), size = 0.5) +
geom_vline(xintercept = 38.0, linetype = 2, colour = 'red') +
geom_vline(xintercept = 28.0, linetype = 2, colour = 'blue') +
scale_x_continuous("Coefficient of Variation", breaks = CoV, expand = c(0, 0)) +
scale_y_continuous("Sample Size", breaks = seq(0, 200, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggtitle("Measurement error: Frequency Analysis") +
theme_bw(base_size = 15)
MDC_as_Change2 <- round(((MDC_input2/grand_mean2) * 100), 0)
SESOI2 <- sort(c(SESOI, MDC_as_Change2))
effects_3 <- grand_mean2 * (SESOI2 / 100)
effects_4 <- round(effects_3 / pooledSD, 2)
# Generate new empty list
output_list <- c()
# Most studies would never have more than 50 participants, so stop there but generate values from 6 to 50, in increments of 1
# This will be consistent for each of the iterations below
n_samples <- seq(6, 200, 1)
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions <- expand.grid(n = n_samples, effect_sizes = effects_4)
# Then run a power calculation using a t-test on each of those rows
# i.e., taking the sample size, and the effect size and then extracting the provided power
power_curve_within <- sapply(seq_len(nrow(conditions)), function(i)
pwr::pwr.t.test(n = conditions[[i , 1]],
d = conditions[[i, 2]],
sig.level = 0.05,
type = "paired")$power)
# Bind the columns together so that the data frame above (i.e., 'conditions' has the achieved power next to it))
power_curve_df <- dplyr::bind_cols(
conditions,
power_within = power_curve_within)
# Plot the data with a vertical line at 0.8 power
plot_within_2 <- ggplot2::ggplot(power_curve_df, ggplot2::aes(x = power_within, y = n)) +
ggplot2::geom_line(ggplot2::aes(color = factor(effect_sizes)), size = 0.5) +
ggplot2::geom_vline(xintercept = 0.8, linetype = 2, colour = 'gray30') +
ggplot2::scale_x_continuous("Power", breaks = seq(0, 1, .1), expand = c(0, 0)) +
ggplot2::scale_y_continuous("Sample Size", breaks = seq(6, 206, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggplot2::ggtitle("Power curve for paired samples") +
#ggplot2::theme(plot.title = element_text(size = 12, face = "bold")) +
ggplot2::theme_bw(base_size = 12)
joint_plot <- arrangeGrob(plot_within_1, plot_within_2, nrow = 2)
return(joint_plot)
}
MDC_input1 <- c(6.7, 8.2, 10.6, 12.6, 16.6)
grand_mean1 <- 27.8
MDC_input2 <- c(6.0, 7.4, 9.5, 11.3, 14.9)
grand_mean2 <- 27.6
pooledSD <- 17.5
fig1 <- batt_atkin_fun(MDC_input1 = MDC_input1,
MDC_input2 = MDC_input2,
grand_mean1 = grand_mean1,
grand_mean2 = grand_mean2,
pooledSD = pooledSD,
CoV = seq(4, 40, 2))
plot(fig1)
batt_atkin_fun <- function(MDC_input1,
grand_mean1,
MDC_input2,
grand_mean2,
pooledSD,
SESOI = c(1, 3, 5, 10, 20, 25, 30),
CoV = seq(4, 50, 2)) {
# Check it is a vector
MDC_input_1 <- as.vector(MDC_input1)
MDC_input_2 <- as.vector(MDC_input2)
#
effects_1 <- grand_mean1 * (SESOI / 100)
#
# sd_diff_1 <- sqrt(2) * (((MDC_as_CoV_1 / 100)) * grand_mean_1)
# sd_diff_2 <- sqrt(2) * (((MDC_as_CoV_2 / 100)) * grand_mean_2)
#
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions_1 <- expand.grid(cov = CoV, effects = effects_1)
conditions_1$sd_diff <- sqrt(2) * (((conditions_1$cov / 100)) * grand_mean1)
# First measurement tool
samples_curve_within_1 <- c()
# Loop over the rows and run a power calculation
for (i in 1: nrow(conditions_1)){
# Store the results of the sample size in the vector saved above
samples_curve_within_1 <- c(samples_curve_within_1,
pwr::pwr.t.test(d = conditions_1[[i, 2]] / conditions_1[[i, 3]],
sig.level = 0.05,
power = 0.80,
type = "paired")$n)
}
# Make a new df with the results and the corresponding conditions of the calculations
power_curve_df_1 <- bind_cols(
conditions_1,
samples_within = samples_curve_within_1)
# Filter to samples < 200 people for ease of display
power_curve_df_1 <- power_curve_df_1 %>% filter(samples_within < 200)
# Change the values of the 'change' column
# For every row of the dataframe...
for (i in 1: nrow(power_curve_df_1)){
# And every value in the Change scores (grand_mean * (SESOI / 100))
for (j in 1: length(effects_1)){
# Change the value in absolute units back to what it was in SESOI units
if(power_curve_df_1[i, 2] == effects_1[j]){
power_curve_df_1[i, 2] <- SESOI[j]
}
}
}
# Plot for first measurement tool
plot_within_1 <- ggplot(power_curve_df_1,
aes(x = cov, y = samples_within)) +
geom_line(aes(color = factor(effects)), size = 0.5) +
geom_vline(xintercept = 38.0, linetype = 2, colour = 'red') +
geom_vline(xintercept = 28.0, linetype = 2, colour = 'blue') +
scale_x_continuous("Coefficient of Variation", breaks = CoV, expand = c(0, 0)) +
scale_y_continuous("Sample Size", breaks = seq(0, 200, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggtitle("Measurement error: Frequency Analysis") +
theme_bw(base_size = 15)
MDC_as_Change2 <- round(((MDC_input2/grand_mean2) * 100), 0)
SESOI2 <- sort(c(SESOI, MDC_as_Change2))
effects_3 <- grand_mean2 * (SESOI2 / 100)
effects_4 <- round(effects_3 / pooledSD, 2)
# Generate new empty list
output_list <- c()
# Most studies would never have more than 50 participants, so stop there but generate values from 6 to 50, in increments of 1
# This will be consistent for each of the iterations below
n_samples <- seq(6, 200, 1)
# Convert to long format whereby each iteration of n samples with have each of the effect sizes next to it
conditions <- expand.grid(n = n_samples, effect_sizes = effects_4)
# Then run a power calculation using a t-test on each of those rows
# i.e., taking the sample size, and the effect size and then extracting the provided power
power_curve_within <- sapply(seq_len(nrow(conditions)), function(i)
pwr::pwr.t.test(n = conditions[[i , 1]],
d = conditions[[i, 2]],
sig.level = 0.05,
type = "paired")$power)
# Bind the columns together so that the data frame above (i.e., 'conditions' has the achieved power next to it))
power_curve_df <- dplyr::bind_cols(
conditions,
power_within = power_curve_within)
# Plot the data with a vertical line at 0.8 power
plot_within_2 <- ggplot2::ggplot(power_curve_df, ggplot2::aes(x = power_within, y = n)) +
ggplot2::geom_line(ggplot2::aes(color = factor(effect_sizes)), size = 0.5) +
ggplot2::geom_vline(xintercept = 0.8, linetype = 2, colour = 'gray30') +
ggplot2::scale_x_continuous("Power", breaks = seq(0, 1, .1), expand = c(0, 0)) +
ggplot2::scale_y_continuous("Sample Size", breaks = seq(6, 206, 10), expand = c(0, 0)) +
scale_color_viridis_d("Effect Size", guide = guide_legend(override.aes = list(size = 3,
alpha = 1) ) ) +
ggplot2::ggtitle("Transfer Function Power Curve (Paired Samples)") +
#ggplot2::theme(plot.title = element_text(size = 12, face = "bold")) +
ggplot2::theme_bw(base_size = 12)
joint_plot <- arrangeGrob(plot_within_1, plot_within_2, nrow = 2)
return(joint_plot)
}
MDC_input1 <- c(6.7, 8.2, 10.6, 12.6, 16.6)
grand_mean1 <- 27.8
MDC_input2 <- c(6.0, 7.4, 9.5, 11.3, 14.9)
grand_mean2 <- 27.6
pooledSD <- 17.5
fig1 <- batt_atkin_fun(MDC_input1 = MDC_input1,
MDC_input2 = MDC_input2,
grand_mean1 = grand_mean1,
grand_mean2 = grand_mean2,
pooledSD = pooledSD,
CoV = seq(4, 40, 2))
plot(fig1)
setwd("/Users/ashleyakerman/Dropbox/My Mac (Ashley’s MacBook Pro)/Downloads")
pdf("PPTR_plot.pdf")
grid::grid.draw(fig1)
dev.off()
SESOI2
sqrt(2) + 1.96 * 7
sqrt(2) * 1.96 * 7
sqrt(2) * 1.96 * (7 / sqrt(4))
